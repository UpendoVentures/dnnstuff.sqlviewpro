<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdAddParameter.Text" xml:space="preserve">
    <value>Add Parameter</value>
  </data>
  <data name="cmdAddReport.Text" xml:space="preserve">
    <value>Add Report</value>
  </data>
  <data name="ControlTitle_editreportset.Text" xml:space="preserve">
    <value>Edit Report Set</value>
  </data>
  <data name="lblConnection.Help" xml:space="preserve">
    <value>Choose the default connection for this report set</value>
  </data>
  <data name="lblConnection.Text" xml:space="preserve">
    <value>Database Connection</value>
  </data>
  <data name="lblDebug.Help" xml:space="preserve">
    <value>Check this option to show debug information during output for testing purposes</value>
  </data>
  <data name="lblDebug.Text" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="lblFooter.Help" xml:space="preserve">
    <value>Enter the footer text to appear below all reports</value>
  </data>
  <data name="lblFooter.Text" xml:space="preserve">
    <value>Report Set Footer Text</value>
  </data>
  <data name="lblHeader.Help" xml:space="preserve">
    <value>Enter the header text to appear above all reports</value>
  </data>
  <data name="lblHeader.Text" xml:space="preserve">
    <value>Report Set Header Text</value>
  </data>
  <data name="lblName.Help" xml:space="preserve">
    <value>Enter a name for the report set</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Report Set Name</value>
  </data>
  <data name="lblParameters.Help" xml:space="preserve">
    <value>Use this section to maintain a list of parameters for this report set</value>
  </data>
  <data name="lblParameters.Text" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="lblReports.Help" xml:space="preserve">
    <value>Use this section to maintain a list of reports for this report set</value>
  </data>
  <data name="lblReports.Text" xml:space="preserve">
    <value>Reports</value>
  </data>
  <data name="lblSkin.Help" xml:space="preserve">
    <value>Choose the theme used to style this report set</value>
  </data>
  <data name="lblSkin.Text" xml:space="preserve">
    <value>Report Set Theme</value>
  </data>
  <data name="ParameterCaption.Header" xml:space="preserve">
    <value>Parameter Caption</value>
  </data>
  <data name="ParameterName.Header" xml:space="preserve">
    <value>Parameter Name</value>
  </data>
  <data name="ParameterType.Header" xml:space="preserve">
    <value>Parameter Type</value>
  </data>
  <data name="ReportName.Header" xml:space="preserve">
    <value>Report Name</value>
  </data>
  <data name="ReportTheme.Header" xml:space="preserve">
    <value>Report Theme</value>
  </data>
  <data name="ReportType.Header" xml:space="preserve">
    <value>Report Type</value>
  </data>
  <data name="cmdApply.Text" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="cmdUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="TabCaption_Help.Text" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="TabCaption_Tab1.Text" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="TabCaption_Tab2.Text" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="lblBackCaption.Help" xml:space="preserve">
    <value>Enter the caption for the back link</value>
  </data>
  <data name="lblBackCaption.Text" xml:space="preserve">
    <value>Back Caption</value>
  </data>
  <data name="lblRunCaption.Help" xml:space="preserve">
    <value>Enter the caption for the run link</value>
  </data>
  <data name="lblRunCaption.Text" xml:space="preserve">
    <value>Run Caption</value>
  </data>
  <data name="lblParameterLayout.Help" xml:space="preserve">
    <value>To override the default parameter layout, specify your own layout here using tokens to represent parameter prompts, captions etc.</value>
  </data>
  <data name="lblParameterLayout.Text" xml:space="preserve">
    <value>Custom Parameter Layout (optional)</value>
  </data>
  <data name="lblAlwaysShowParameters.Help" xml:space="preserve">
    <value>Check this option if you want the parameters to remain visible even after running the report</value>
  </data>
  <data name="lblAlwaysShowParameters.Text" xml:space="preserve">
    <value>Always show parameters</value>
  </data>
  <data name="lblRenderMode.Help" xml:space="preserve">
    <value>Select how your reports will appear</value>
  </data>
  <data name="lblRenderMode.Text" xml:space="preserve">
    <value>Render Mode</value>
  </data>
  <data name="lblAutoRun.Help" xml:space="preserve">
    <value>Check this to automatically run reports with parameters with their default values</value>
  </data>
  <data name="lblAutoRun.Text" xml:space="preserve">
    <value>Autorun Report</value>
  </data>
</root>