<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdQueryTest.Text" xml:space="preserve">
    <value>Test Query</value>
  </data>
  <data name="ControlTitle_editreport.Text" xml:space="preserve">
    <value>Edit Report</value>
  </data>
  <data name="lblConnection.Help" xml:space="preserve">
    <value>Select the database connection used to run this report</value>
  </data>
  <data name="lblConnection.Text" xml:space="preserve">
    <value>Database Connection</value>
  </data>
  <data name="lblDrilldownFieldname.Help" xml:space="preserve">
    <value>Enter the fieldname of the drilldown report that this report will link from</value>
  </data>
  <data name="lblDrilldownFieldname.Text" xml:space="preserve">
    <value>Drilldown from fieldname</value>
  </data>
  <data name="lblDrilldownReport.Help" xml:space="preserve">
    <value>Select the report that this report will drill down from</value>
  </data>
  <data name="lblDrilldownReport.Text" xml:space="preserve">
    <value>Drilldown from report</value>
  </data>
  <data name="lblFooter.Help" xml:space="preserve">
    <value>Enter the footer text that will appear below your report</value>
  </data>
  <data name="lblFooter.Text" xml:space="preserve">
    <value>Footer Text</value>
  </data>
  <data name="lblHeader.Help" xml:space="preserve">
    <value>Enter the header text that will appear above your report</value>
  </data>
  <data name="lblHeader.Text" xml:space="preserve">
    <value>Header Text</value>
  </data>
  <data name="lblName.Help" xml:space="preserve">
    <value>Enter the name of your report</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Report Name</value>
  </data>
  <data name="lblQuery.Help" xml:space="preserve">
    <value>Enter the sql query used to drive data to your report</value>
  </data>
  <data name="lblQuery.Text" xml:space="preserve">
    <value>Report Query</value>
  </data>
  <data name="lblReportType.Help" xml:space="preserve">
    <value>Select the type of report you wish to show</value>
  </data>
  <data name="lblReportType.Text" xml:space="preserve">
    <value>Report Type</value>
  </data>
  <data name="lblSkin.Help" xml:space="preserve">
    <value>Select the theme used to style your report</value>
  </data>
  <data name="lblSkin.Text" xml:space="preserve">
    <value>Report Theme</value>
  </data>
  <data name="NoDrilldown.Text" xml:space="preserve">
    <value>No Drilldown</value>
  </data>
  <data name="lblNoItems.Help" xml:space="preserve">
    <value>Enter the text that will appear if the query returns no items</value>
  </data>
  <data name="lblNoItems.Text" xml:space="preserve">
    <value>No Items Text</value>
  </data>
  <data name="TabCaption_Tab1.Text" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="TabCaption_Tab2.Text" xml:space="preserve">
    <value>Report Type</value>
  </data>
  <data name="lblPageTitle.Help" xml:space="preserve">
    <value>If specified, this will replace the page title</value>
  </data>
  <data name="lblPageTitle.Text" xml:space="preserve">
    <value>Page Title Text</value>
  </data>
  <data name="lblCommandCacheTimeout.Help" xml:space="preserve">
    <value>Enter the query cache timeout in seconds. Zero (0) = no caching</value>
  </data>
  <data name="lblCommandCacheTimeout.Text" xml:space="preserve">
    <value>Query Cache Timeout (seconds)</value>
  </data>
  <data name="lblMetaDescription.Help" xml:space="preserve">
    <value>Enter the text that will appear in the page META description (alternately if the text contains &amp;lt;meta&amp;gt; tags then it will be treated as such and inserted in full into the head section and not the meta description)</value>
  </data>
  <data name="lblMetaDescription.Text" xml:space="preserve">
    <value>Meta Description/ Meta Tags</value>
  </data>
  <data name="lblCommandCacheScheme.Help" xml:space="preserve">
    <value>Choose the scheme used to invalidate the cached data</value>
  </data>
  <data name="lblCommandCacheScheme.Text" xml:space="preserve">
    <value>Query Cache Scheme</value>
  </data>
</root>